# Public Domain

# NOTE: This file is kept just as a reminder of a rejected mkmap program
#       concept – the following code is CODE in the programmer sense,
#       and therefore presumably NOT suitable as an intuitive specifica-
#       tion of an image that a non-programmer can read, copy and modify.

orion() {
    ## procedure for the heavenly hunter 
    border += load “db/ori_b.db”;
    labels += [pos: [x: middle, y: bottom], 
               string: “Orion”,
               justify: middle];
    projection [type: Lambert_conic, α: 5ʰ20ᵐ, δ: 10°, Δδ: 10°];
    frame [height: 500px, width: 500px];
}
monoceros() {
    ## procedure for the heavenly unicorn
    border += load “db/mon_b.db”;
    labels += [pos: [x: middle, y: bottom], 
               string: “Monoceros”,
               justify: middle];
    projection [type: Lambert_conic, α: 7ʰ10ᵐ, δ: 10°, Δδ: 10°];
    frame [height: 500px, width: 600px];
}
main() {
    ## ‘layer’ declares the layers wherein the program puts
    ## objects, when executing an ‘out’ all layers are drawn
    ## with stored objects one by one, background first, then
    ## border, aso. to at last map_labels. What layers that
    ## are to be used, is up to the programmer and the naming 
    ## is free by programmer choice:

    layer background;    # background: no projections, just one frame
    layer border;        # border: given in αδ* as line loops →
                         #   coorsys change, projection, frame
    layer grid;          # grid: given in αδ* as lines →
                         #   coorsys change, projection, frame
    layer nebulae;       # nebulae: given in αδ → coorsys change,
                         #   coorsys change, projection, frame
    layer stars;         # stars: given in αδ → coorsys change,
                         #   coorsys change, projection, frame
    layer labels;        # labels: given in αδ → x₀y₀ + xy offset ???

    in background set no projection;
    in labels set no projection;

    ## That achieved, data is created and put into the layers:

    background += infinite [color: [r: x00, g: x00, b: x40]];
    grid       += grid [α: 1ʰ, δ: 10°];
    stars      += load “db/stars.db”;
    labels     += align stars with “db/stardesg.db”;
    nebulae    += load “db/nebulae.db”;
    labels     += align nebulae with “db/nebdesg.db”;
    { # a stacklike block for loading local data
        orion; # run procedure ‘orion’
        out “images/orion.svg”;
      # dropped here.
    }
    {
        monoceros; # run procedure ‘monoceros’
        out “images/monoceros.svg”;
    }
}

